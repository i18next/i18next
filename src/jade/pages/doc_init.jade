- var path = '../'
- var title = 'i18next - initialization'
!!! 5
html(lang="en")
  head
    include ../includes/layout/head

    title i18next Documentation: Initialization

  body
    include ../includes/layout/header
          
    include ../includes/layout/content
      .documentation
        include ../includes/doc_hero

        //- ************************************************
        //- * INITIALISATION
        //- * 
        h2 Initialization

        pre
          code
            | i18n.init();
        pre
          code
            | // with options
            | i18n.init({ lng: "en-US" });
            | // "later"
            | var x = i18n.t("key");
            | 
            | // with callback
            | i18n.init(function(err, t) { 
            |   var x = t("key");
            | });
            | 
            | // with both
            | i18n.init({ lng: "en-US" }, function(err, t) { 
            |   var x = t("key");
            | });

        //- ************************************************
        //- * Options
        //- * 
        h3 Basic Options

        .row-fluid
          .span4
            h4.feature-title Set language on init:

          .span8
            .feature
              pre
                code
                  | i18n.init({ lng: 'en-US' }, function(err, t) { /* loading done */ });
              .feature-description
                a(name='lookupvalue')
                p Resources will be resolved in this order:
                  ol
                    li 1) try languageCode plus countryCode, eg. 'en-US'
                    li 2) alternative look it up in languageCode only, eg. 'en'
                    li 3) finally look it up in definded fallback language, default: 'dev'
              
              .feature-description
                a(name='detectlng')
                p If language is not set explicitly i18next tries to detect the user language by:
                  ol
                    li 1) querystring parameter (?setLng=en-US)
                    li 2) cookie (i18next)
                    li 3) language set in navigator

              .feature-description
                p 
                  h5.alert-heading Change language programatically:
                  | Call function 
                  code i18next.setLng(lng, callback)
                  |  .
                  h5.alert-heading Read out current language set:
                  | Call function 
                  code i18next.lng()
                  |  returns current lng.

        .row-fluid
          .span4
            h4.feature-title Set language after init:

          .span8
            .feature
              pre
                code
                  | i18n.setLng('en-US', function(err, t) { /* loading done */ });
              .feature-description
                p you could fix the language by calling it this way:
                p
                  code i18n.setLng('en-US', { fixLng: true }, function(enUS) { /* done */ });
                p every call to enUS ( enUS(key, opts) ) will return in enUS even if setLng is called again in different lng
              

        .row-fluid
          .span4
            h4.feature-title Change the querystring param to lookup lng:

          .span8
            .feature
              pre
                code
                  | i18n.init({ detectLngQS: 'lang' });
              .feature-description
                p The current locale to set will be looked up in the new parameter: 
                  code ?lang=en-US 
                p
                  span.badge.badge-info Hint:
                  |  default would be 
                  code ?setLng=en-US

        .row-fluid
          .span4
            h4.feature-title Change the cookie name to lookup lng:

          .span8
            .feature
              pre
                code
                  | i18n.init({ cookieName: 'lang' }); /* default 'i18next' */
              .feature-description
                p The current locale to set and looked up in the given cookie parameter.

        
        .row-fluid
          .span4
            h4.feature-title Change the cookie domain:

          .span8
            .feature
              pre
                code
                  | i18n.init({ cookieDomain: '*.mydomain.com' });
              .feature-description
                p Sets the cookie domain to given value.
                
        .row-fluid
          .span4
            h4.feature-title Disable cookie usage:

          .span8
            .feature
              pre
                code
                  | i18n.init({ useCookie: false });
              .feature-description
                p Use this only if your sure that language will be provided by the other lookup options or set programatically.                

        .row-fluid
          .span4
            h4.feature-title preload additional languages on init:

          .span8
            .feature
              pre
                code
                  | i18n.init({ preload: ['de-DE', 'fr'] });
              .feature-description
                p The additional languages will be preloaded.

              .feature-description
                p 
                  h5.alert-heading Preload after init:
                  | Call function 
                  code i18next.preload([lngs], callback)
                  | .

        .row-fluid
          .span4
            h4.feature-title whitelist languages to be allowed on init:

          .span8
            .feature
              pre
                code
                  | i18n.init({ lngWhitelist: ['de-DE', 'de', 'fr'] });
              .feature-description
                p Only specified languages will be allowed to load.

        .row-fluid
          .span4
            h4.feature-title load additional namespaces:

          .span8
            .feature
              a(name='loadAdditionalNS')
              pre
                code
                  | i18n.loadNamespace('myNamespace', function() { /* loaded */ });
                  | i18n.loadNamespaces(['myNamespace1', 'myNamespace2'], function() { /* loaded */ });
              .feature-description
                p The additional namespaces will be loaded.

              .feature-description
                p 
                  h5.alert-heading changing the default namespace:
                  | Call function 
                  code i18next.setDefaultNamespace('myNamespace')
                  | .

        .row-fluid
          .span4
            h4.feature-title Unset/Set fallback language:

          .span8
            .feature
              h6 setting one or more fallback language:
              pre
                code
                  | i18n.init({ fallbackLng: 'en' });
                  | // or multiple
                  | i18n.init({ fallbackLng: ['fr', 'en'] });
              .feature-description
                p If not set it will default to 'dev'. If turned on, all missing key/values will be 
                  | sent to this language.
                p 
                  span.badge.badge-info Production Hint:
                  |  set fallback language to some meaningful language, eg. 'en'

              br
              h6 turn fallback language feature off:
              pre
                code
                  | i18n.init({ fallbackLng: false });
              .feature-description
                p As the fallbackLng will default to 'dev' you can turn it off by setting the option value to false.
                  | This will prevent loading the fallbacks resource file and any futher look up of missing value inside a fallback file.

        .row-fluid
          .span4
            h4.feature-title Unset/Set fallback namespace(s):

          .span8
            .feature
              h6 with default namespace
              pre
                code
                  | // given resourcesfile namespace1.en.json (default ns)
                  | { 
                  |    key1: 'value of key 1' 
                  | }
                  | 
                  | // given additional resourcesfile namespace2.en.json
                  | { 
                  |   keys: { 
                  |     2: 'value of key 2',
                  |     3: 'value of key 3'
                  |   }
                  | }
                  | 
                  | i18n.init({ fallbackToDefaultNS: true });
                  | 
                  | i18n.t("namespace2:key1"); // -> value of key 1

              h6 with one or more namespace(s)
              pre
                code
                  | // given resourcesfile namespace1.en.json
                  | { 
                  |    key1: 'value of key 1 - ns1' 
                  | }
                  |Â 
                  | // given resourcesfile namespace2.en.json
                  | { 
                  |    key1: 'value of key 1 - ns2' 
                  |    key2: 'value of key 2 - ns2' 
                  | }
                  | 
                  | // given resourcesfile namespace3.en.json
                  | { 
                  |   keys: { 
                  |     2: 'value of key 2',
                  |     3: 'value of key 3'
                  |   }
                  | }
                  | 
                  | i18n.init({ fallbackNS: 'namespace2' });
                  | 
                  | i18n.t("namespace3:key1"); // -> value of key 1 - ns2
                  | 
                  | // array
                  | i18n.init({ fallbackNS: ['namespace1', 'namespace2'] }); // order matters
                  | 
                  | i18n.t("namespace3:key1"); // -> value of key 1 - ns1
                  | i18n.t("namespace3:key2"); // -> value of key 2 - ns2

              .feature-description
                p If a resource can't be found in namespace it will be looked up in default namespace. By 
                | default this option is turned off.

        .row-fluid
          .span4
            h4.feature-title Specify which locales to load:
            p This will help you optimizing the loading behaviour. In combination with setting 
              | fallbackLng to false you can reduce the requests to the server to one! 

          .span8
            .feature
              a(name='loadbehaviour')
              h6 only load current resource file:
              pre
                code
                  | i18n.init({ load: 'current' });
              .feature-description
                p If load option is set to current i18next will load the current set language 
                  | (this could be a specific (en-US) or unspecific (en) resource file).
                p 
                  span.badge.badge-info Hint:
                  |  to prevent loading the fallbackLng's resource file set fallbackLng to false.

              br
              h6 only load unspecific resource file:
              pre
                code
                  | i18n.init({ load: 'unspecific' });
              .feature-description
                p If set to unspecific i18next will always load the unspecific resource file 
                  | (eg. en instead of en-US).
                p 
                  span.badge.badge-info Hint:
                  |  to prevent loading the fallbackLng's resource file set fallbackLng to false.

        .row-fluid
          .span4
            a(name='caching')
            h4.feature-title Caching with localStorage:

          .span8
            .feature
              pre
                code
                  | i18n.init({ 
                  |   useLocalStorage: true | false,
                  |   localStorageExpirationTime: 86400000 // in ms, default 1 week
                  | });
              .feature-description
                p 
                  | Caching is turned off by default. You might want to turn it on for production.
                p 
                  span.badge.badge-warning Warning:
                  |  if the resouces in a given language had been stored to localStorage they won't
                  | be fetched / reloaded from online until set 
                  code localStorageExpirationTime
                  |  expired. So if they had been cached once and you add
                  | new resources, they won't be reloaded until expired.
                  p But you can easily remove the values from localstorage by calling, eg.: 
                    code localStorage.removeItem("res_en" )
        
        .row-fluid
          .span4
            h4.feature-title handling of null values:

          .span8
            .feature
              pre
                code
                  | // given resourcesfile namespace1.dev.json (fallback lng)
                  | { 
                  |    key1: 'fallback' 
                  | }
                  | // given resourcesfile namespace1.en.json
                  | { 
                  |    key1: null 
                  | }
                  | 
                  | i18n.init({ fallbackOnNull: true });
                  | i18n.t('key1'); // -> 'fallback'
                  | 
                  | i18n.init({ fallbackOnNull: false });
                  | i18n.t('key1'); // -> ''

              .feature-description
                p Default is true.

        .row-fluid
          .span4
            h4.feature-title handling of empty string values:

          .span8
            .feature
              pre
                code
                  | // given resourcesfile namespace1.dev.json (fallback lng)
                  | { 
                  |    key1: 'fallback' 
                  | }
                  | // given resourcesfile namespace1.en.json
                  | { 
                  |    key1: '' 
                  | }
                  | 
                  | i18n.init({ fallbackOnEmpty: true });
                  | i18n.t('key1'); // -> 'fallback'
                  | 
                  | i18n.init({ fallbackOnEmpty: false });
                  | i18n.t('key1'); // -> ''

              .feature-description
                p Default is false.

        .row-fluid
          .span4
            h4.feature-title Debug output:

          .span8
            .feature
              pre
                code
                  | i18n.init({ debug: true });
              .feature-description
                p If something went wrong you might find some helpful information on console log.

        //- ************************************************
        //- * Resource Loading
        //- * 
        h2 Resource Loading

        h3 init callback when loaded

        .row-fluid
          .span4
            pre
              code
                | i18n.init(callback);

          .span8
            .feature
              pre
                code
                  | i18n.init(function(err, t) { 
                  |   var appName = t("key");
                  | });
              .feature-description
                p 
                  | after callback is called you can use the translation function
                  strong  't' 
                  | to access your resources in given language.

        a(name='getresources')
        h3 options to load resources

        .row-fluid
          .span4
            h4.feature-title Pass in resource store:

          .span8
            .feature
              pre
                code
                  | // tree: lng -> namespace -> key -> nested key
                  | var resources = {
                  |   dev: { translation: { 'key': 'value' } },
                  |   en: { translation: { 'key': 'value' } },            
                  |   'en-US': { translation: { 'key': 'value' } }
                  | };
                  | 
                  | i18n.init({ resStore: resources });

              .feature-description
                p As you provide the resources the callbacks will fire immediatly and no external resources will be loaded!


        .row-fluid
          .span4
            h4.feature-title Adding resources after initialization:

          .span8
            .feature

              h5 Adding additional resources:
              pre
                code
                  | // add a key/value
                  | i18n.addResource('de-CH', 'translation', 'key1', 'value1');
                  | i18n.addResource('de-CH', 'translation', 'deep.key2', 'value2');
              pre
                code
                  | // add multiple keys/values
                  | var additionalResources = { 'key1': 'value1', 'deep.key2': 'value2' };
                  | 
                  | i18n.addResourcea('de-CH', 'translation', additionalResources);

              h5 Adding additional resource bundles:
              pre
                code
                  | var additionalResources = { 'key': 'value1', 'deep': { 'key2': 'value2' } };
                  | 
                  | // addResourceBundle(lng, ns, resources) ns will default to default ns if not provided
                  | i18n.addResourceBundle('de-CH', 'translation', additionalResources);

              .feature-description
                p you can set deep flag to merge with existing values: 
                  code i18n.addResourceBundle('de-CH', 'translation', additionalResources, true);

              h5 Removing additional resource bundles again:
              pre
                code
                  | // removeResourceBundle(lng, ns) ns will default to default ns if not provided
                  | i18n.removeResourceBundle('de-CH', 'translation');

        .row-fluid
          .span4
            h4.feature-title Set static route to load resources from:

          .span8
            .feature
              pre
                code
                  | var option = { resGetPath: 'locales/__lng__/__ns__.json' };
                  | 
                  | i18n.init(option);

              .feature-description
                p Will load 'locales/en-US/translation.json'.
                p 
                  | If language is set to
                  strong  'en-US' 
                  | following resource files will be loaded one-by-one:
                  ul
                    li en-US
                    li en
                    li dev (default fallback language)
                p 
                  span.badge.badge-info Hint:
                  |  to lowercase countryCode in requests, eg. to 'en-us' 
                  | set option 
                  strong lowerCaseLng = true

              br
              h6 Another sample:
              pre
                code
                  | var option = { resGetPath: 'locales/__ns__-__lng__.json' };
                  | 
                  | i18n.init(option);

              .feature-description
                p Will load 'locales/translation-en-US.json'.
        
        .row-fluid
          .span4
            h4.feature-title Overriding ajax loading functionality

          .span8
            p You could exchange the ajax loading functionality by providing a custom loader on init:

            pre
              code
                | var option = { 
                |   customLoad: function(lng, ns, options, loadComplete) {
                |      // load the file for given language and namespace
                | 
                |      // callback with parsed json data
                |      loadComplete(null, data); // or loadComplete('some error'); if failed
                |   }
                | }
                | 
                | i18n.init(option);


        .row-fluid
          .span4
            h4.feature-title Load resource dynamically generated on server:

          .span8
            .feature
              pre
                code
                  | var option = { 
                  |   resGetPath: 'resources.json?lng=__lng__&ns=__ns__',
                  |   dynamicLoad: true 
                  | };
                  | 
                  | i18n.init(option);

              .feature-description
                p 
                  | Will request 'resources.json?lng=en-US+en+dev&ns=translation'. You will have to assert 
                  | that the server returns the complete JSON resource Store.
                p 
                  | If language is set to
                  strong  'en-US' 
                  | following resources will be loaded in one request:
                  ul
                    li en-US
                    li en
                    li dev (default fallback language)

        .row-fluid
          .span4
            h4.feature-title Change namespace:

          .span8
            .feature
              pre
                code
                  | var option = { ns: 'resource' };
                  | 
                  | i18n.init(option);

              .feature-description
                p 
                  | Will load:
                  ol
                    li 'locales/en-US/resource.json'
                    li 'locales/en/resource.json'
                    li 'locales/dev/resource.json'

                p
                  span.badge.badge-info Hint:
                  |  Default namespace is 'translation'.

        .row-fluid
          .span4
            h4.feature-title Multiple namespace:

          .span8
            .feature
              pre
                code
                  | var option = { 
                  | ns: { 
                  |     namespaces: ['app', 'buttons'], 
                  |     defaultNs: 'app'
                  |   } 
                  | };
                  | 
                  | i18n.init(option, function(err, t) {
                  |   // access default namespace
                  |   var x = t("any.key.from.app")
                  | 
                  |   // to access another namespace prepend [ns]:
                  |   var y = t("buttons:any.key.from.buttons") 
                  | });

              .feature-description
                p 
                  | Will load:
                  ol
                    li 'locales/en-US/app.json'
                    li 'locales/en/app.json'
                    li 'locales/dev/app.json'
                    li 'locales/en-US/buttons.json'
                    li 'locales/en/buttons.json'
                    li 'locales/dev/buttons.json' 
                p or 
                  a(href="#loadAdditionalNS") load additional namespaces
                  |  after initialization


        .row-fluid
          .span4
            h4.feature-title Load resource synchronously:

          .span8
            .feature
              pre
                code
                  | var option = { 
                  |   getAsync: false 
                  | };
                  | 
                  | i18n.init(option);

              .feature-description
                p 
                  | Requests for resources will now be called synchronously.
                p
                  span.badge.badge-info Hint:
                  |  The init function will now be blocking until all resources are loaded!!!


    include ../includes/layout/extra
      
    include ../includes/layout/footer
    
    include ../includes/layout/endscripts
